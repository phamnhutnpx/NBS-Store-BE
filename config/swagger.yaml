openapi: 3.0.1
info:
  title: npsstore API
  description: This is a Backend API of NBSStore
  version: 1.0.0
  termsOfService: http://quocbaoit.com/terms/
  contact:
    email: NBSstoreProject@quocbaoit.com
tags:
  - name: Order
    description: Access to NBSstore orders
    externalDocs:
      description: Find out more
      url: http://fb.quocbaoit.com
  - name: Product
    description: Everything about our products
  - name: User
    description: Operations about user
schemes:
  - https
  - http
paths:
  /api/v1/product: 
    post: #productRouter.save is not a function, fix done
      description: Create a new product
      summary: Create a new product
      tags:
        - Product
      requestBody:
        description: lorem ipsum
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductForm'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/definitions/Product'
        '400':
          description: lorem ipsum
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
    get:
      description: Get a part of products to show on shop client
      summary: Get a part of products to show on shop client
      tags:
        - Product
      parameters:
        - in: query
          name: pageSize
          required: false
          schema:
            type: number
          description: Number of products in 1 page
        - in: query
          name: pageNumber
          required: false
          schema:
            type: number
          description: Page number
        - in: query
          name: keyword
          required: false
          schema:
            type: string
          description: Keyword of product name to find in DB
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: number
                    description: current product page number
                  pages:
                    type: number
                    description: total product pages
                  products:
                    type: array
                    description: total product in 1 page
                    items:
                      $ref: '#/definitions/Product'
        '204':
          description: No products found for this keyword
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
  /api/v1/product/all:
    get:
      summary: Return all products of store
      description: This api requires authorization with token JWT
      tags:
        - Product
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/Product'
  /api/v1/product/{id}: #500 Undocumented Error: Internal Server Error, wrong id could lead this eror due to server cannot cast it properly 
    get: 
      summary: Get matched product with given id (product detail)
      description: Get matched product with given id (product detail)
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/definitions/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
    put: 
      summary: Update existed product
      description: Update existed product
      tags:
        - Product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      requestBody:
        description: lorem ipsum
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductForm'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/definitions/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
    delete:
      summary: Delete existed product
      description: Update existed product
      tags:
        - Product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
  /api/v1/product/{id}/review: #Cannot read properties of undefined (reading 'push')
    post:
      summary: Review a product
      description: Review a product
      security:
        - bearerAuth: []
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      requestBody:
        description: lorem ipsum
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating: 
                  type: integer
                  description: User ratings (5-stars rating) 
                  minimum: 1
                  maximum: 5
                  nullable: false
                comment:
                  type: string
                  description: User reviews (1 review per user)
                  nullable: false
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
        '404':
          description: lorem ipsum
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
  /api/v1/user/login:
    post:
      summary: Logs user into the system
      tags:
        - User
      requestBody:
        description: Payload to login
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  nullable: true
                password:
                  type: string
                  nullable: true
              additionalProperties: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/definitions/MyUser'
                  - type: object
                    properties:
                      createdAt:
                        type: string
                        description: created timestamp
                        format: date-time
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
  /api/v1/user:
    post:
      summary: Create new user account
      description: This can only be done by the logged in user.
      tags:
        - User
      requestBody:
        description: description n√®
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: false
                email:
                  type: string
                  nullable: false
                password:
                  type: string
                  nullable: false
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/definitions/MyUser'
        '400':
          description: lorem ipsum
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
    get:
      summary: Get all users by admin
      description: Get all users by admin
      tags:
        - User
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/definitions/MyUser'
                    - type: object
                      properties:
                        createdAt:
                          type: string
                          description: The date and time when this record is created
                          format: date-time
                        updatedAt:
                          type: string
                          description: The date and time when this record is updated
                          format: date-time
                        _v:
                          type: number
                          description: unknown
                        password:
                          type: string
                          description: User password
  /api/v1/user/profile:
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      description: lorem ipsum
      summary: lorem ipsum
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/definitions/UserProfile' #return id, name, email, isAdmin
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'
    put:
      security:
        - bearerAuth: []
      tags:
        - User
      description: lorem ipsum
      summary: lorem ipsum
      requestBody:
        description: lorem ipsum
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: true
                email:
                  type: string
                  nullable: true
                password:
                  type: string
                  nullable: true
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/definitions/UserProfile' #return id, name email, isAdmin, token
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/definitions/Error'        

# REFERENCE_FROM_HERE
  /pet:
    post:
      tags:
      - "pet"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "pet"
      summary: "Update an existing pet"
      description: ""
      operationId: "updatePet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/findByStatus:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/findByTags:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: true
  /pet/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/{petId}/uploadImage:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  MyUser:
    type: object
    properties:
      _id:
        type: string
        description: user id
      name:
        type: string
        description: username
      email:
        type: string
        description: email
      isAdmin:
        type: boolean
        description: is Admin or not
      token:
        type: string
        description: JWT login token
  Error:
    type: object
    properties:
      message:
        type: string
        description: error message
      stack:
        type: string
        description: error message description
  Product:
    type: object
    properties:
      _id:
        type: string
        description: Product ID
      name:
        type: string
        description: Product name
      image:
        type: string
        description: Product image's url
      description:
        type: string
        description: Product description
      rating:
        type: number
        description: User ratings (5-stars rating)
      numReviews:
        type: number
        description: Number of reviews
      price:
        type: number
        description: Product price
      countInStock:
        type: number
        description: Total amount of a product available
      reviews:
        type: array
        description: User reviews
        items:
          type: string
      __v:
        type: number
        description: unknown
      createdAt:
        type: string
        description: The date and time when this record is created
        format: date-time
      updatedAt:
        type: string
        description: The date and time when this record is updated
        format: date-time
  UserProfile:
    type: object
    properties:
      _id:
        type: string
        description: user id
      name:
        type: string
        description: username
      email:
        type: string
        description: email
      isAdmin:
        type: boolean
        description: is Admin or not
      createAt:
        type: string
        description: The date and time when this record is created
        format: date-time
  ProductForm:
    type: object
    properties:
      name:
        type: string
        description: Product ID
      price:
        type: number
        description: Product price
      description:
        type: string
        description: Product description
      image:
        type: string
        description: Product image's url
      countInStock:
        type: number
        description: Total amount of a product available
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
# REFERENCE_TO_HERE

components:
  schemas:
    ProductForm:
      type: object
      properties:
        name:
          type: string
          description: Product ID
        price:
          type: number
          description: Product price
        description:
          type: string
          description: Product description
        image:
          type: string
          description: Product image's url
        countInStock:
          type: number
          description: Total amount of a product available
  # 1) Define the security scheme type (HTTP bearer)
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: apiKey
      description: "<i>JWT Authorization header using the Bearer scheme.</i> <b>Example</b>: <i><u>Bearer 12345abcdef</u></i>"
      in: header          # can be "header", "query" or "cookie"
      name: Authorization # name of the header, query parameter or cookie
# 2) Apply the security globally to all operations
security:
  - bearerAuth: [] # use the same name as above